using System.Collections; // Importa o namespace System.Collections para usar classes de coleções
using System.Collections.Generic; // Importa o namespace System.Collections.Generic para usar coleções genéricas
using UnityEngine; // Importa o namespace UnityEngine para acessar funcionalidades do Unity

public class Colectable : MonoBehaviour // Declara a classe Colectable e herda de MonoBehaviour, indicando que é um componente do Unity
{
    public Rigidbody2D rig; // Declara uma variável pública do tipo Rigidbody2D chamada rig
    public float speed; // Declara uma variável pública do tipo float chamada speed

    void FixedUpdate() // Método chamado em intervalos fixos, ideal para manipulações de física
    {
        // Move a posição do objeto rig para baixo (eixo Y) com uma velocidade constante, baseada na variável speed e no tempo decorrido desde o último quadro
        rig.MovePosition(transform.position + Vector3.down * speed * Time.deltaTime);
    }
}




------------------------------------------
using System.Collections; // Importa o namespace System.Collections para usar classes de coleções
using System.Collections.Generic; // Importa o namespace System.Collections.Generic para usar coleções genéricas
using UnityEngine; // Importa o namespace UnityEngine para acessar funcionalidades do Unity

public class Obstacle : MonoBehaviour // Declara a classe Obstacle e herda de MonoBehaviour, indicando que é um componente do Unity
{
    public Rigidbody2D rig; // Declara uma variável pública do tipo Rigidbody2D chamada rig
    public float speed; // Declara uma variável pública do tipo float chamada speed

    void Start() // Método chamado uma vez quando o objeto é inicializado
    {
        // Define a direção inicial do movimento do obstáculo, com uma rotação aleatória entre -120 e -40 graus em torno do eixo Z
        Vector3 movementDirection = Quaternion.Euler(0, 0, Random.Range(-120, -40)) * Vector3.right;
        // Aplica a velocidade inicial ao Rigidbody2D para movimentar o obstáculo na direção definida
        rig.velocity = movementDirection * speed;
    }

    // FixedUpdate não é necessário, pois o movimento do Rigidbody2D está sendo manipulado diretamente

    private void OnTriggerEnter2D(Collider2D collision) // Método chamado quando um objeto colide com o trigger do obstáculo
    {
        // Verifica se o objeto que colidiu tem a tag "Player"
        if (collision.CompareTag("Player"))
        {
            // Exibe uma mensagem de log indicando que houve uma colisão com o jogador
            Debug.Log("Bateu");
        }
    }
}

