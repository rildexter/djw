using System.Collections;
using System.Collections.Generic;
using UnityEditor.Tilemaps;
using UnityEngine;
public class PlayerLogic : MonoBehaviour
{
    [SerializeField] private Transform groundCheck;
    [SerializeField] private float groundDist;
    [SerializeField] private LayerMask groundLayer;
    [SerializeField] private int totalJump;

    //1 - variavel para animação
    [SerializeField] private Animator anim;

    private int jumpLes;
    private bool canJump;
    private bool isGroundCheck;

    [SerializeField] private float moveSpeed;
    [SerializeField] private float jumpForce;
    private float inputDirection;


    private bool isDirectionRight = true; 
    private Rigidbody2D rb2d;
    void Start()
    {
        rb2d = GetComponent<Rigidbody2D>();
        jumpLes = totalJump;
    }
    void Update()
    {
        GetInputMove();
        DirectionCheck();
    }
    private void FixedUpdate()
    {
        MoveLogic();
        CheckArea();
        CanJump();
        //3- metodo anim sendo chamado
        MoveAnim();
    }

    void CanJump()
    {
        if(isGroundCheck && rb2d.velocity.y <= 0)
        {
            jumpLes = totalJump;
        }
       if(jumpLes <= 0)
        {
            canJump = false;
        }
        else
        {
            canJump |= true;
        }
    }
    void CheckArea()
    {
         isGroundCheck = Physics2D.OverlapCircle(groundCheck.position, groundDist, groundLayer);
    }
    private void OnDrawGizmos()
    {
        Gizmos.DrawWireSphere(groundCheck.position, groundDist);
    }
       void DirectionCheck()
    {
        if (isDirectionRight && inputDirection < 0)
        {
            Flip();
        }
        else if(!isDirectionRight && inputDirection > 0)
        {
            Flip();
        }

    }
    void GetInputMove()
    {
        inputDirection = Input.GetAxisRaw("Horizontal");
            if(Input.GetButtonDown("Jump"))
        {
            Jump();
        }
    }
    void MoveLogic()
    {
        rb2d.velocity = new Vector2(inputDirection * moveSpeed, rb2d.velocity.y);
    }

    //2- gerar um metodo que ira controlar a animação
    void MoveAnim()
    {
        anim.SetFloat("HorizontalAnim", rb2d.velocity.x);
    }
    void Jump()
    {
        if (canJump)
        {
            rb2d.velocity = new Vector2(rb2d.velocity.x, jumpForce);
            jumpLes--;
        }
        
    }
    void Flip()
    {
        isDirectionRight = !isDirectionRight;
        transform.Rotate(0.0f, 180.0f, 0.0f);
    }
}
